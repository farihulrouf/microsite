{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pubana/frondweb/microsite/src/components/Modal/index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport propTypes from 'prop-types';\nimport { craetePortal } from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\nexport default function Modal(props) {\n  const {\n    0: Ready,\n    1: setReady\n  } = useState(() => false);\n  const {\n    0: Display,\n    1: setDisplay\n  } = useState(() => false);\n  const {\n    0: Allow,\n    1: setAllow\n  } = useState(() => true);\n  const idModal = \"modal\";\n  const ModalRef = useRef(null);\n\n  function toggleAllow() {\n    setAllow(!Allow);\n  }\n\n  function toggle() {\n    if (props.toggleModal) props.toggleModal();else setDisplay(!Display);\n  }\n\n  function handleClickOutside(event) {\n    var _ModalRef$current, _ModalRef$current$con;\n\n    if (ModalRef !== null && ModalRef !== void 0 && (_ModalRef$current = ModalRef.current) !== null && _ModalRef$current !== void 0 && (_ModalRef$current$con = _ModalRef$current.contains) !== null && _ModalRef$current$con !== void 0 && _ModalRef$current$con.call(_ModalRef$current, event.target) && Allow) toggle();\n  }\n\n  useEffect(() => {\n    const rootContainer = document.createElement(\"div\");\n    rootContainer.setAttribute(\"id\", idModal);\n    setReady(true);\n    if (!document.getElementById(idModal)) document.body.appendChild(rootContainer);\n  }, []);\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  });\n  useEffect(() => {\n    if (Display || props.in) {\n      document.querySelector(\"body\").classList.add(\"modal-open\");\n    }\n\n    return () => {\n      document.querySelector(\"body\").classList.remove(\"modal-open\");\n    };\n  }, [Display, props.in]);\n  if (!Ready) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.children(toggle), document && document.getElementById(idModal) && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: createPortal()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 58\n    }, this)]\n  }, void 0, true);\n}\nModal.defaultprops = {};\nModal.propTypes = {\n  in: propTypes.bool,\n  toggleModal: propTypes.func,\n  content: propTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/pubana/frondweb/microsite/src/components/Modal/index.js"],"names":["React","useState","useEffect","useRef","propTypes","craetePortal","CSSTransition","Modal","props","Ready","setReady","Display","setDisplay","Allow","setAllow","idModal","ModalRef","toggleAllow","toggle","toggleModal","handleClickOutside","event","current","contains","target","rootContainer","document","createElement","setAttribute","getElementById","body","appendChild","addEventListener","removeEventListener","in","querySelector","classList","add","remove","children","createPortal","defaultprops","bool","func","content","isRequired"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\n\nimport propTypes from 'prop-types'\nimport { craetePortal } from 'react-dom'\n\nimport {CSSTransition} from 'react-transition-group'\n\nexport default function Modal(props) {\n    const [Ready, setReady] = useState(() => false)\n    const [Display, setDisplay] = useState(() => false)\n    const [Allow, setAllow] = useState(() => true)\n\n    const idModal = \"modal\"\n    const ModalRef = useRef(null)\n\n    function toggleAllow() {\n        setAllow(!Allow)\n    }\n    function toggle() {\n        if(props.toggleModal) props.toggleModal();\n        else setDisplay(!Display)\n    }\n\n    function handleClickOutside(event) {\n        if(ModalRef?.current?.contains?.(event.target) && Allow)\n        toggle()\n    }\n\n    useEffect(() => {\n        const rootContainer = document.createElement(\"div\")\n        rootContainer.setAttribute(\"id\", idModal)\n        setReady(true)\n\n        if(!document.getElementById(idModal))\n          document.body.appendChild(rootContainer)\n    }, [])\n\n    useEffect(() => {\n        document.addEventListener(\"mousedown\", handleClickOutside)\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside)\n        }\n    })\n\n\n    useEffect(() => {\n        if(Display || props.in) {\n            document.querySelector(\"body\").classList.add(\"modal-open\")\n        }\n        return () => {\n            document.querySelector(\"body\").classList.remove(\"modal-open\")\n        }\n    }, [Display, props.in])\n\n    if(!Ready) return null;\n\n    return (\n        <>\n        {props.children(toggle)}\n        {document && document.getElementById(idModal) && <div>\n            {\n                createPortal(\n                )\n               \n\n            } \n            </div>\n        }\n        </>\n    )\n}\n\nModal.defaultprops = {}\nModal.propTypes = {\n    in: propTypes.bool,\n    toggleModal: propTypes.func,\n    content: propTypes.func.isRequired,\n}"]},"metadata":{},"sourceType":"module"}